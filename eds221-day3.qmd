---
title: "eds221-day3"
format: html
editor: visual
execute: 
  warning: TRUE
---

```{r}
library(palmerpenguins)
library(tidyverse)
```

## Conditional Statement

```{r}
#This is a plain if statement 
temperature <- 95

if(temperature > 97) {
  print("temperature warning")
}

#if else:

if(temperature > 97) {
  print("temperature warning")
} else
  { print("no temperature warning")
}
```

Create an if else statement for blue wale lengths. Create a variable blue whale, which has a value of 40 meters. Add an if else statement that returns "GIANT" if the length exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length \<= 20.

```{r}
blue_whale <- 40

if(blue_whale > 35) {
  print("GIANT")
} else if (blue_whale >= 20 & blue_whale <= 35)
  { print ("MEDIUM")
} else if (blue_whale < 20) {
  print("SMALL")}
```

## Switch statement

```{r}
#This is one option to writing better if else statements, create a new value 
housing_type <- "single"

switch(housing_type, 
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100"))

if(housing_type == "whole") {
  print("1100")
} else if (housing_type == "double") {
  print("750")
} else if (housing_type == "single") {
  print ("400")
}
       
```

## For loops

```{r}
height <- c(58, 61, 76, 68, 85, 75)

for (i in seq_along(height)) {
  half_height = height[i] / 2
  print(half_height)
}

##For each value in the height vector, retun the sum of the value + the one right after it

for (i in seq_along(height)) {
  plusone = (height[i] + height[i + 1])
  print(plusone)
}

```

```{r}
##Write a for loop that calculates the value of height for each element divided by the mean of the entire height vector 

for (i in seq_along(height)) {
 mean = height[i] / mean(height)
 print(mean)
}
```

## For loop w conditional statement 

```{r}
#Write a for loop with a conditional if statement that returns the means of all numeric variables w/in the penguins datatset

#is.numeric (asks is the thing numeric)
#[[]] asks for the specific data in said col

#mean(vec, na.rm = TRUE)

peng <- vector(mode = "numeric", length = ncol(penguins))

for(i in seq_along(penguins)) {
  if(is.numeric(penguins[[i]])) {
    penguin_mean <- mean(penguins[[i]], na.rm = TRUE)
    peng[i] <- penguin_mean
    print(peng[i])
  }
}

```

## Functional programming for easier iteration 

Use apply() to iterate over rows or columms, margin = 1 is rows, and margin = 2 represents columns

```{r}
#Find the median of each of the cols 
apply(X = mtcars, MARGIN = 2, FUN = median)
#This is the same exact thing of above
apply(mtcars, 2, median)
```

Use dplyr::across()

Starter: find the mean flipper length of penguins by species

```{r}
penguins |> 
  group_by(species) |>
  summarize(mean_flipper = mean(flipper_length_mm, na.rm = TRUE),
            sd_flipper = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))
```

```{r}
#group_by only knows to grab whatever is next in expression
penguins |>
  group_by(species, island) |>
  summarize(across(.cols = where(is.numeric),
                          mean, 
                          na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love enchiladas"

if (str_detect(food, "burritos")) {
  print("yay burritos") 
} else {
  print("what about burritos")
}
```
